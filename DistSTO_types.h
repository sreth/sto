/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DistSTO_TYPES_H
#define DistSTO_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class DoRpcResponse;

class DoRpcArgs;


class DoRpcResponse {
 public:

  DoRpcResponse(const DoRpcResponse&);
  DoRpcResponse& operator=(const DoRpcResponse&);
  DoRpcResponse() : success(0), boolResp1(0), intResp1(0), intResp2(0), intResp3(0), intResp4(0), strResp1() {
  }

  virtual ~DoRpcResponse() throw();
  bool success;
  bool boolResp1;
  int64_t intResp1;
  int64_t intResp2;
  int64_t intResp3;
  int64_t intResp4;
  std::string strResp1;
  std::vector<int64_t>  intListResp1;
  std::vector<int64_t>  intListResp2;

  void __set_success(const bool val);

  void __set_boolResp1(const bool val);

  void __set_intResp1(const int64_t val);

  void __set_intResp2(const int64_t val);

  void __set_intResp3(const int64_t val);

  void __set_intResp4(const int64_t val);

  void __set_strResp1(const std::string& val);

  void __set_intListResp1(const std::vector<int64_t> & val);

  void __set_intListResp2(const std::vector<int64_t> & val);

  bool operator == (const DoRpcResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(boolResp1 == rhs.boolResp1))
      return false;
    if (!(intResp1 == rhs.intResp1))
      return false;
    if (!(intResp2 == rhs.intResp2))
      return false;
    if (!(intResp3 == rhs.intResp3))
      return false;
    if (!(intResp4 == rhs.intResp4))
      return false;
    if (!(strResp1 == rhs.strResp1))
      return false;
    if (!(intListResp1 == rhs.intListResp1))
      return false;
    if (!(intListResp2 == rhs.intListResp2))
      return false;
    return true;
  }
  bool operator != (const DoRpcResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DoRpcResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DoRpcResponse &a, DoRpcResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DoRpcResponse& obj)
{
  obj.printTo(out);
  return out;
}


class DoRpcArgs {
 public:

  DoRpcArgs(const DoRpcArgs&);
  DoRpcArgs& operator=(const DoRpcArgs&);
  DoRpcArgs() : objid(0), op(0), strArg1(), strArg2(), strArg3(), boolArg1(0), boolArg2(0), intArg1(0) {
  }

  virtual ~DoRpcArgs() throw();
  int64_t objid;
  int64_t op;
  std::string strArg1;
  std::string strArg2;
  std::string strArg3;
  bool boolArg1;
  bool boolArg2;
  int64_t intArg1;

  void __set_objid(const int64_t val);

  void __set_op(const int64_t val);

  void __set_strArg1(const std::string& val);

  void __set_strArg2(const std::string& val);

  void __set_strArg3(const std::string& val);

  void __set_boolArg1(const bool val);

  void __set_boolArg2(const bool val);

  void __set_intArg1(const int64_t val);

  bool operator == (const DoRpcArgs & rhs) const
  {
    if (!(objid == rhs.objid))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(strArg1 == rhs.strArg1))
      return false;
    if (!(strArg2 == rhs.strArg2))
      return false;
    if (!(strArg3 == rhs.strArg3))
      return false;
    if (!(boolArg1 == rhs.boolArg1))
      return false;
    if (!(boolArg2 == rhs.boolArg2))
      return false;
    if (!(intArg1 == rhs.intArg1))
      return false;
    return true;
  }
  bool operator != (const DoRpcArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DoRpcArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DoRpcArgs &a, DoRpcArgs &b);

inline std::ostream& operator<<(std::ostream& out, const DoRpcArgs& obj)
{
  obj.printTo(out);
  return out;
}



#endif
