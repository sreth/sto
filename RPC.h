/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPC_H
#define RPC_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "DistSTO_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RPCIf {
 public:
  virtual ~RPCIf() {}
  virtual void do_rpc(std::string& _return, const int64_t objid, const int64_t op, const std::vector<std::string> & opargs) = 0;
};

class RPCIfFactory {
 public:
  typedef RPCIf Handler;

  virtual ~RPCIfFactory() {}

  virtual RPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCIf* /* handler */) = 0;
};

class RPCIfSingletonFactory : virtual public RPCIfFactory {
 public:
  RPCIfSingletonFactory(const boost::shared_ptr<RPCIf>& iface) : iface_(iface) {}
  virtual ~RPCIfSingletonFactory() {}

  virtual RPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCIf> iface_;
};

class RPCNull : virtual public RPCIf {
 public:
  virtual ~RPCNull() {}
  void do_rpc(std::string& /* _return */, const int64_t /* objid */, const int64_t /* op */, const std::vector<std::string> & /* opargs */) {
    return;
  }
};

typedef struct _RPC_do_rpc_args__isset {
  _RPC_do_rpc_args__isset() : objid(false), op(false), opargs(false) {}
  bool objid :1;
  bool op :1;
  bool opargs :1;
} _RPC_do_rpc_args__isset;

class RPC_do_rpc_args {
 public:

  RPC_do_rpc_args(const RPC_do_rpc_args&);
  RPC_do_rpc_args& operator=(const RPC_do_rpc_args&);
  RPC_do_rpc_args() : objid(0), op(0) {
  }

  virtual ~RPC_do_rpc_args() throw();
  int64_t objid;
  int64_t op;
  std::vector<std::string>  opargs;

  _RPC_do_rpc_args__isset __isset;

  void __set_objid(const int64_t val);

  void __set_op(const int64_t val);

  void __set_opargs(const std::vector<std::string> & val);

  bool operator == (const RPC_do_rpc_args & rhs) const
  {
    if (!(objid == rhs.objid))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(opargs == rhs.opargs))
      return false;
    return true;
  }
  bool operator != (const RPC_do_rpc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPC_do_rpc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPC_do_rpc_pargs {
 public:


  virtual ~RPC_do_rpc_pargs() throw();
  const int64_t* objid;
  const int64_t* op;
  const std::vector<std::string> * opargs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPC_do_rpc_result__isset {
  _RPC_do_rpc_result__isset() : success(false) {}
  bool success :1;
} _RPC_do_rpc_result__isset;

class RPC_do_rpc_result {
 public:

  RPC_do_rpc_result(const RPC_do_rpc_result&);
  RPC_do_rpc_result& operator=(const RPC_do_rpc_result&);
  RPC_do_rpc_result() : success() {
  }

  virtual ~RPC_do_rpc_result() throw();
  std::string success;

  _RPC_do_rpc_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RPC_do_rpc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPC_do_rpc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPC_do_rpc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPC_do_rpc_presult__isset {
  _RPC_do_rpc_presult__isset() : success(false) {}
  bool success :1;
} _RPC_do_rpc_presult__isset;

class RPC_do_rpc_presult {
 public:


  virtual ~RPC_do_rpc_presult() throw();
  std::string* success;

  _RPC_do_rpc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RPCClient : virtual public RPCIf {
 public:
  RPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void do_rpc(std::string& _return, const int64_t objid, const int64_t op, const std::vector<std::string> & opargs);
  void send_do_rpc(const int64_t objid, const int64_t op, const std::vector<std::string> & opargs);
  void recv_do_rpc(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_do_rpc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCProcessor(boost::shared_ptr<RPCIf> iface) :
    iface_(iface) {
    processMap_["do_rpc"] = &RPCProcessor::process_do_rpc;
  }

  virtual ~RPCProcessor() {}
};

class RPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCProcessorFactory(const ::boost::shared_ptr< RPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCIfFactory > handlerFactory_;
};

class RPCMultiface : virtual public RPCIf {
 public:
  RPCMultiface(std::vector<boost::shared_ptr<RPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCIf> > ifaces_;
  RPCMultiface() {}
  void add(boost::shared_ptr<RPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void do_rpc(std::string& _return, const int64_t objid, const int64_t op, const std::vector<std::string> & opargs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->do_rpc(_return, objid, op, opargs);
    }
    ifaces_[i]->do_rpc(_return, objid, op, opargs);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RPCConcurrentClient : virtual public RPCIf {
 public:
  RPCConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void do_rpc(std::string& _return, const int64_t objid, const int64_t op, const std::vector<std::string> & opargs);
  int32_t send_do_rpc(const int64_t objid, const int64_t op, const std::vector<std::string> & opargs);
  void recv_do_rpc(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
