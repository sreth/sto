// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DistSTO.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class DistSTOHandler : virtual public DistSTOIf {
 public:
  DistSTOHandler() {
    // Your initialization goes here
  }

  void read(std::string& _return, const int64_t objid) {
    // Your implementation goes here
    printf("read\n");
  }

  bool lock(const int32_t tuid, const std::vector<int64_t> & objids) {
    // Your implementation goes here
    printf("lock\n");
  }

  bool check(const int32_t tuid, const std::vector<int64_t> & objids, const std::vector<int64_t> & versions) {
    // Your implementation goes here
    printf("check\n");
  }

  void install(const int32_t tuid, const int64_t tid, const std::vector<std::string> & written_values) {
    // Your implementation goes here
    printf("install\n");
  }

  void abort(const int32_t tuid) {
    // Your implementation goes here
    printf("abort\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DistSTOHandler> handler(new DistSTOHandler());
  shared_ptr<TProcessor> processor(new DistSTOProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

